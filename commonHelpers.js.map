{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst input = document.querySelector(\"#datetime-picker\");\nconst button = document.querySelector(\"button\");\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = null;\n\nbutton.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n      console.log(selectedDates[0]);\n      if (selectedDates[0] <= Date.now()) {\n          button.disabled = true;\n          iziToast.show({\n    message: \"Please choose a date in the future\"\n});\n      }\n      else {\n          button.disabled = false;\n          userSelectedDate = selectedDates[0];\n      }\n  },\n};\n\nflatpickr(input, options);\n\nbutton.addEventListener('click', startTimer);\n\nfunction startTimer() {\n    let result = userSelectedDate - Date.now();\n    button.disabled = true;\n   let idInterval = setInterval(() => { \n       result -= 1000;\n       if (result < 1000) {\n           clearInterval(idInterval)\n           updateTimer();\n           return;\n       } \n       let date = convertMs(result);\n       updateTimer(date);\n    }, 1000);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimer({ days = 0, hours = 0, minutes = 0, seconds = 0 } = {}) {\n    daysEl.textContent = padStart\n    (days);\n    hoursEl.textContent = padStart(hours);\n    minutesEl.textContent = padStart(minutes);\n    secondsEl.textContent = padStart(seconds);\n}\n\nfunction padStart(num) {\n    return num.toString().padStart(2 , 0)\n}"],"names":["input","button","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","options","selectedDates","iziToast","flatpickr","startTimer","result","idInterval","updateTimer","date","convertMs","ms","days","hours","minutes","seconds","padStart","num"],"mappings":"2FAKA,MAAMA,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAS,SAAS,cAAc,QAAQ,EACxCC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzD,IAAIC,EAAmB,KAEvBL,EAAO,SAAW,GAElB,MAAMM,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EACxBA,EAAc,CAAC,GAAK,KAAK,IAAG,GAC5BP,EAAO,SAAW,GAClBQ,EAAS,KAAK,CACpB,QAAS,oCACb,CAAC,IAGSR,EAAO,SAAW,GAClBK,EAAmBE,EAAc,CAAC,EAEzC,CACH,EAEAE,EAAUV,EAAOO,CAAO,EAExBN,EAAO,iBAAiB,QAASU,CAAU,EAE3C,SAASA,GAAa,CAClB,IAAIC,EAASN,EAAmB,KAAK,IAAG,EACxCL,EAAO,SAAW,GACnB,IAAIY,EAAa,YAAY,IAAM,CAE/B,GADAD,GAAU,IACNA,EAAS,IAAM,CACf,cAAcC,CAAU,EACxBC,IACA,MACH,CACD,IAAIC,EAAOC,EAAUJ,CAAM,EAC3BE,EAAYC,CAAI,CAClB,EAAE,GAAI,CACX,CAEA,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASP,EAAY,CAAE,KAAAI,EAAO,EAAG,MAAAC,EAAQ,EAAG,QAAAC,EAAU,EAAG,QAAAC,EAAU,CAAC,EAAK,CAAA,EAAI,CACzEnB,EAAO,YAAcoB,EACpBJ,CAAI,EACLf,EAAQ,YAAcmB,EAASH,CAAK,EACpCf,EAAU,YAAckB,EAASF,CAAO,EACxCf,EAAU,YAAciB,EAASD,CAAO,CAC5C,CAEA,SAASC,EAASC,EAAK,CACnB,OAAOA,EAAI,SAAQ,EAAG,SAAS,EAAI,CAAC,CACxC"}